

// const GOOGLE_API_KEY = "AIzaSyDJwMLwjA-vGdE6tVYiFZwFvTarswZug8M"; 
// const NETLIFY_ACCESS_TOKEN = "nfp_jZpHMxPpnB2zMDvDBVVzEvahDU23DGH94156";
// const NETLIFY_SITE_ID = "9e955514-5324-4327-be59-195e63afce1c";

// --- server.js ---
// This is your BACKEND file. It runs in Node.js on a server (like Render).

require('dotenv').config(); // Loads variables from a .env file into process.env
const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const JSZip = require('jszip');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 10000;

// --- Middleware ---
app.use(cors()); // Allows your front-end to talk to this server
app.use(express.json({ limit: '2mb' })); // Allows server to read JSON from requests

// --- Environment Variables (THE CORRECT WAY) ---
// Create a file named .env in the same directory and put your keys there:
// GOOGLE_API_KEY=AIzaSy...
// NETLIFY_ACCESS_TOKEN=nfp_...
// NETLIFY_SITE_ID=9e95...
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const NETLIFY_ACCESS_TOKEN = process.env.NETLIFY_ACCESS_TOKEN;
const NETLIFY_SITE_ID = process.env.NETLIFY_SITE_ID;

if (!GOOGLE_API_KEY || !NETLIFY_ACCESS_TOKEN || !NETLIFY_SITE_ID) {
  console.error("FATAL ERROR: A required environment variable is missing! Check your .env file or Render environment settings.");
  process.exit(1); 
}

// --- Routes ---
app.get('/', (req, res) => res.status(200).json({ status: "Server is running" }));

app.post('/generate', async (req, res) => {
    try {
        const genAI = new GoogleGenerativeAI(GOOGLE_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const { prompt } = req.body;
        if (!prompt) {
            return res.status(400).json({ message: "Prompt is required." });
        }
        const fullPrompt = `You are a senior front-end developer and UI/UX designer. Your Task: Generate a valid JSON object. The JSON must have two keys: "message" (a friendly reply to the user) and "code" (a string containing a self-contained HTML body fragment with CSS and JS). The 'code' value must NOT contain <html>, <head>, or <body> tags. CRITICAL: Your entire output must be a single, valid JSON object, properly escaping all special characters for JSON format (e.g., use \\" for quotes inside strings, \\n for newlines). User's Request: "${prompt}"`;
        const result = await model.generateContent(fullPrompt);
        const response = await result.response;
        
        let aiResponseText = response.text();
        
        // A more robust way to clean and parse the AI's response
        const startIndex = aiResponseText.indexOf('{');
        const endIndex = aiResponseText.lastIndexOf('}');
        if (startIndex === -1 || endIndex === -1) {
            throw new Error("AI response did not contain a recognizable JSON object.");
        }
        const jsonString = aiResponseText.substring(startIndex, endIndex + 1);
        
        res.json(JSON.parse(jsonString));
    } catch (error) {
        console.error("ERROR in /generate:", error);
        res.status(500).json({ message: `Server failed: ${error.message}` });
    }
});

// ===== FIXED AND CORRECTED DEPLOYMENT ROUTE =====
// --- server.js ---

// ===== THE CORRECTED AND FINAL DEPLOYMENT ROUTE =====
// --- server.js ---

// ===== VERIFY THIS CODE BLOCK IS IN YOUR server.js FILE =====
app.post('/deploy', async (req, res) => {
    try {
        console.log("--- SERVER.JS: RECEIVED DEPLOY REQUEST ---");

        // THIS IS THE CRITICAL FIX: Get the 'code' variable from the request body.
        const code = req.body.code;

        // Now we can safely check if 'code' exists.
        if (!code) {
            return res.status(400).json({ success: false, message: 'Server did not receive any code to deploy.' });
        }

        // The rest of the function now correctly uses the 'code' variable.
        const fullHtmlContent = String(code).trim().toLowerCase().startsWith('<!doctype html>') 
            ? code
            : `<!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Generated by CodeWeaver AI</title>
                </head>
                <body>
                    ${code}
                </body>
                </html>`;
        
        const zip = new JSZip();
        zip.file("index.html", fullHtmlContent);
        const zipBuffer = await zip.generateAsync({ type: "nodebuffer" });

        const deployResponse = await fetch(`https://api.netlify.com/api/v1/sites/${NETLIFY_SITE_ID}/deploys`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/zip', 'Authorization': `Bearer ${NETLIFY_ACCESS_TOKEN}` },
            body: zipBuffer
        });

        const deployData = await deployResponse.json();
        if (!deployResponse.ok) {
            throw new Error(`Netlify deploy failed: ${deployData.message || 'Unknown error'}`);
        }

        console.log("Deployment successful, URL:", deployData.ssl_url);
        res.json({ success: true, url: deployData.ssl_url });

    } catch (error) {
        console.error('Deployment process failed:', error);
        res.status(500).json({ success: false, message: `Deployment Failed: ${error.message}` });
    }
});

// --- Start Server ---
app.listen(PORT, () => console.log(`Server startup complete. Listening on port ${PORT}`));